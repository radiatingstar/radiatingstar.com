---
import { CollectionEntry, getCollection } from "astro:content";
import Main from "../../layouts/Main.astro";
import FormattedDate from "../../components/FormattedDate.astro";
import readingTime from "reading-time";
import MainHeading from "../../components/MainHeading.astro";
import Section from "../../components/Section.astro";
import PostsList from "../../components/PostsList.astro";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;
const readTime = readingTime(post.body);
const { Content, headings } = await post.render();
const hasHeadings = headings.length > 0;
const posts = (await getCollection("blog"))
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
  .slice(0, 4);
---

<Main {...post.data}>
  <div class="flex flex-col gap-16">
    <div
      class:list={[
        "grid gap-y-16 mt-8 cols-1 max-w-max mx-auto",
        {
          "gap-x-16 [grid-template-columns:_minmax(300px,_max-content)_1fr]":
            hasHeadings,
        },
      ]}
    >
      <header
        class:list={[
          "col-span-full",
          {
            // Using the Tailwind's max-w-max won't work, as the default 65ch is too small for this font.
            "max-w-[80ch]": !hasHeadings,
          },
        ]}
      >
        <MainHeading>
          {post.data.title}
        </MainHeading>
        <div class="flex gap-2 mt-2 text-foreground">
          <ul class="contents">
            {
              post.data.tags.map((tag) => (
                <li class="text-primary-red">#{tag.id}</li>
              ))
            }
          </ul>
          ∙
          <span>{readTime.text}</span>
          ∙
          <FormattedDate date={post.data.date} />
        </div>
      </header>
      <div
        class="prose prose-xl dark:prose-invert prose-headings:font-nunito max-w-prose prose-headings:scroll-margin-top-[1.5rem]"
        id="article"
      >
        <Content />
      </div>
      {
        hasHeadings && (
          <aside>
            <p class="mb-2 text-slate-200">In this post:</p>
            <div class="sticky top-5 text-foreground">
              <div
                id="bar"
                class="absolute z-10 -left-5 w-[2px] bg-gradient-to-b from-primary-red to-primary-pink h-[1px]"
              />
              <nav class="flex flex-col gap-2 group">
                {headings.map(
                  ({ depth, slug, text }) =>
                    depth === 2 && (
                      <a
                        href={`#${slug}`}
                        class:list={[
                          "relative max-w-max hover:text-transparent hover:bg-clip-text hover:bg-gradient-to-r hover:from-primary-red hover:to-primary-pink",
                          "before:absolute before:top-0 before:-left-5 before:w-[2px] before:h-full before:pr-5",
                          "before:border-l-2 before:border-foreground before:border-solid",
                          "before:opacity-0 before:transition-opacity  group-hover:before:opacity-50 hover:before:!opacity-100",
                        ]}
                      >
                        {text}
                      </a>
                    )
                )}
              </nav>
            </div>
          </aside>
        )
      }
    </div>
    <Section title="Read more">
      <PostsList posts={posts} />
    </Section>
  </div>
</Main>

<script>
  const bar = document.querySelector("#bar");
  const article = document.querySelector("#article");
  window.addEventListener(
    "scroll",
    () => {
      const articleRect = article?.getBoundingClientRect();
      const progress =
        articleRect.top <= 0
          ? Math.round(
              Math.min(
                100,
                ((articleRect.height - articleRect.bottom) /
                  (articleRect.height - window.innerHeight)) *
                  100
              )
            )
          : 0;
      bar.style.height = `${progress}%`;
    },
    { passive: true }
  );
</script>
